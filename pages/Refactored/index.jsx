import TextField from "./Register/_components_/input_label.jsx";
import PasswordField from "./Register/_components_/password.jsx";
import BareHeader from "./Global_components/bare_header.jsx";
import styles from "@/styles/Home.module.css";
import Head from 'next/head'

import { useRouter } from "next/router";
import { LAMBDA_RESP } from "@/lib/constants";
import { userService } from "@/pages/services/authorization";
import { fieldData } from "./Register/index.jsx";
import {ButtonLock} from "./Global_components/button_lock.js";
import LoadingCircle from "./Global_components/loading_circle.jsx";
import Footer from "./Global_components/footer.jsx";


fieldData.fname[2] = false;
fieldData.lname[2] = false;
fieldData.remail[2] = false;
fieldData.rpassword[2] = false;

export default function SignIn () {
    const handleSubmit = (event) => {
        event.preventDefault();
        if (!checkFieldData()) {return;}
        if (!ButtonLock.isLocked()) {
            ButtonLock.LockButton();
            console.log(fieldData);

            //set button visually to be locked
            event.target.children[2].textContent = "Signing In";
            event.target.children[2].style = "background-color : var(--green-muted-background)";
            
            //make API call

            //on success, route to home where first Redux state is created
            
            //default to test locking
            setTimeout( () => {
                ButtonLock.UnlockButton();
                event.target.children[2].textContent = "Sign In";
            event.target.children[2].style = "";
            }, 5000);
        } else {
            console.log("locked");
        }
    }

    const checkFieldData = () => {
        let isValid = true;
        let message = "";
        for (let field in fieldData) {
            if (fieldData[field][2]) {
                message = "";
                if (fieldData[field][1] == null) {
                    fieldData[field][1] = document.querySelector(`#${field}`);
                }
                fieldData[field][0] = fieldData[field][1].value;
                switch (field) {
                    case "email":
                        if (fieldData[field][0].trim() == "") {
                            message = "Required";
                        } else 
                        if (fieldData[field][0].search(/[a-zA-z0-9]+@[a-zA-z0-9]+[.][a-zA-Z0-9]+/g) == -1) {
                            message = "Invalid email format";
                        }
                        break;
                    case "password": //prevent users from entering passwords not even possible
                    if (fieldData[field][0].trim() == "") {
                        message = "Required";
                      } else 
                        if (fieldData[field][0].search(/(?=(.*[a-z]){3,})/g) == -1) {
                            message = "Must have at least 3 lower case letters";
                          } else 
                          if (fieldData[field][0].search(/(?=(.*[A-Z]){3,})/g) == -1) {
                            message = "Must have at least 3 upper case letters";
                          } else 
                          if (fieldData[field][0].search(/(?=(.*[0-9]){3,})/g) == -1) {
                            message = "Must have at least 3 numbers";
                          } else 
                          if (fieldData[field][0].search(/(?=(.*[?#@!*()])+)/g) == -1) {
                            message = "Must have at least 1 special character ? # @ ! * ( )";
                          }
                          
                        break;
                    default:
                        break;
                }
    
                if (message != "") {
                    isValid = false;
                    if (fieldData[field][1] == null) {
                        fieldData[field][1] = document.querySelector(`#${field}`);
                    }
                    fieldData[field][1].style = "outline: 1px solid var(--red-background);";
                    fieldData[field][1].parentNode.nextElementSibling.textContent = message;
                    fieldData[field][1].parentNode.nextElementSibling.style = "display:block";
                    fieldData[field][1].addEventListener(
                        "input",
                        function () {
                          this.style = "";
                          this.parentElement.nextElementSibling.style = "";
                        },
                        { once: true }
                      );
                }
            }
        }
        return isValid;
    }
    return (
        <>
        <Head>
        <title>Sign In</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        </Head>
        <BareHeader></BareHeader>
        <main className = {styles.main}>
        <div id="incorrect" className={styles.incorrect_box}>
        <p></p>
        </div>
        <div className= {styles.position_box}>
        <div className={styles.signup_form}>
            <form onSubmit={handleSubmit} method="post">
                <TextField id={"email"} label={"Email"}></TextField>
                <PasswordField id={"password"} label={"Password"}></PasswordField>
                <button type="submit">Sign In</button>
            </form>
        </div>
        <p>
        New to BillMates? <a href="./Refactored/Register">Create Account</a>
        </p>
        </div>
        </main>
        <Footer></Footer>
        </>
    )
}
