import styles from '@/styles/Group.module.css'
import Header from '../Global_components/header.jsx'
import Footer from '../Global_components/footer.jsx'
import Head from 'next/head'
import { PAYMENT_PREFERENCE } from "@/lib/constants";
import LoadingCircle from '../Global_components/loading_circle.jsx';
import { removeLoader } from '../Global_components/loading_circle.jsx';
import { groupService } from '@/pages/services/groups.js'
import React, { useEffect, useState } from "react";

const showTransactionInput = () => {
    return null;
}

// export async function getServerSideProps({res, req}) {
//     setTimeout(()=> {
//         removeLoader();
//     }, 5000);
//     return {
//         props: {}
//     };
// }

export default function Group() {
    // let response_data = {
    //     groupName : "",
    //     groupId : "7d8bc5d5-d258-4ca5-9fee-00d32f9ad97f", //get from redux state
    //     members : [],
    //     expenseHistory : [],
    //     userId : "lcover@purdue.edu", //get from redux state
    //     pendingApproval : [],
    //     relative : 0.00,
    //     manager : ""
    // };
    //make API call and populate group information
    const [response_data, setResponseData] = useState({});
    const [loading, setLoading] = useState(false);
    useEffect(() => {
      fetchData();
    }, []);
  
    const fetchData = () => {
      setLoading(true);
      setTimeout( ()=> {
        setLoading(false);
      }, 5000 );
    //   fetch("https://api.github.com/users/jameshibbard")
    //     .then((response) => response.json())
    //     .then((data) => {
    //         console.log(data);
    //       setResponseData(data);
    //       setLoading(false);
    //     })
    //     .catch((error) => {
    //       console.log(error);
    //       setLoading(false);
    //     });
    };

    return (
    <>
        <Head>
        <title>Groups</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header></Header>

      <main className={styles.main}>
        <div className={styles.transaction_history}>
        {(loading) ?
            <LoadingCircle additionalStyles={{margin : "15px auto"}}></LoadingCircle>
            :
            <></>
        }
             {/* {
                pendingApproval.map( (trans) => {
                    pending_num++;
                    if (trans.paid_to == userId) {
                    return (
                        <div index={pending_num} className={`${styles.transaction_container} ${styles.pending}`} key={pending_num} onClick={(e) => makePendingView(e)}>
                        <div className={styles.pending_transaction_info}>
                            <div className={styles.transaction_name_amount}>
                                <p>Pending:</p>
                                <p>{trans.title}</p>
                            </div>
                            <div className={styles.transaction_owner_date}>
                                <p>{members[trans.paid_by]}</p>
                                <p>{trans.date}</p>
                            </div>
                        </div>
                        <div className={styles.relative_amount}>
                            <p>${trans.amount_paid.toFixed(2)}</p>
                        </div>
                    </div>
                    )
                    } else {
                        return <></>
                    }
                })
            }
            {  
                expenseHistory.map( (trans) => {
                    history_num++;
                    let isOwner = ( trans.owner == userId );
                    let relative = ( isOwner ) ?  sumMemberExpenses(trans.users) : ((parseFloat(trans.users[userId]) || 0.00).toFixed(2));
                    //relative_amount += parseFloat(((isOwner) ? relative : relative * -1));
                    return (
                        <div index={history_num} className={`${styles.transaction_container} ${(relative == 0)? styles.neutral  : ( (isOwner) ? styles.positive : styles.negative)}`} key={history_num} onClick={(e) => makeTransactionView(e)}>
                        <div className={styles.transaction_info}>
                            <div className={styles.transaction_name_amount}>
                                <p>{trans.title}</p>
                                <p>${trans.amount.toFixed(2)}</p>
                            </div>
                            <div className={styles.transaction_owner_date}>
                                <p>{members[trans.owner]}</p>
                                <p>{trans.request_time}</p>
                            </div>
                        </div>
                        <div className={styles.relative_amount}>
                            <p>${relative}</p>
                        </div>
                    </div>
                    )
                })
            }
            <button className={styles.delete_group_button} onClick={deleteGroup}>DELETE GROUP</button>
            <div className={styles.buffer_block}></div> */}
        </div>
        {/* <GroupHeading name={groupName} members={Object.keys(members).length} amount={relative} groupId={groupId}></GroupHeading> */}
    </main>



{/* 
      <div className={styles.transaction_background} id = "transaction_input">
        <div className={styles.transaction_large}>
            <div className={styles.x_button} onClick={(e) => hide(e.nativeEvent.target.parentNode.parentNode, true)}></div>
            <div className={styles.transaction_heading}>
                <input type="text" placeholder='Item Name' id = "input_item_name"></input>
                <span></span>
                <input type="text" placeholder='00.00' id = "input_item_total"></input>
                <span></span>
                <p>{members[userId]}</p>
            </div>
            <div className={styles.split_button_container}>
                <button onClick={() => splitEven()}>Split Even</button>
            </div>
            <div className={styles.transaction_people} count = "0" id = "transaction_people">
                {

                Object.keys(members).map( (id) => {
                    return (
                    <div className={styles.person}>
                        <div className={styles.radio} onClick={(e) => selectPerson(e)}></div>
                        <p className={styles.person_name} onClick={(e) => selectPerson(e)}>{members[id]}</p>
                        <input type="text" placeholder='00.00' email={id} onChange={ (e) => {e.target.parentNode.parentNode.nextElementSibling.style = "";} }></input>
                    </div>
                    )
                })
                
                }
 
            </div>
            <span></span>
            <div className={styles.submit_expense_container} onClick={handleExpenseSubmit}><p>Submit</p></div>
        </div>
    </div>

        <div className={styles.transaction_background} id = "transaction_view">
            <div className={styles.transaction_large}>
                <div className={styles.x_button} onClick={(e) => hide(e.nativeEvent.target.parentNode.parentNode)}></div>
                <div className={styles.transaction_heading} id = "view_item_info">
                    <p>PLACEHOLDER</p>
                    <p>PLACEHOLDER</p>
                    <p>PLACEHOLDER</p>
                </div>
                <div><p className={styles.debt_remaining_text}>Debts Remaining</p></div>
                <div className={styles.transaction_people} id = "view_transaction_people">
                </div>
                <div className={styles.submit_expense_container} onClick={(e) => {hide(e.nativeEvent.target.parentNode.parentNode); showFulfillExpense(e)}}><p>Bill Me</p></div>
            </div>
        </div>
        <div className={styles.transaction_background} id = "pending_view">
            <div className={styles.transaction_large}>
                <div className={styles.x_button} onClick={(e) => hide(e.nativeEvent.target.parentNode.parentNode)}></div>
                <div className={styles.transaction_heading} id = "pending_item_info">
                    <p>PLACEHOLDER</p>
                    <p>PLACEHOLDER</p>
                </div>
                <div><p className={`${styles.debt_remaining_text} ${styles.pending_larger_p}`}>Amount Paying</p></div>
                <div className={styles.submit_expense_container} onClick={(e) => {hide(e.nativeEvent.target.parentNode.parentNode); handlePendingPay(e, true)}}><p>Accept</p></div>
                <div className={`${styles.submit_expense_container} ${styles.negative}`} onClick={(e) => {hide(e.nativeEvent.target.parentNode.parentNode); handlePendingPay(e, false)}}><p>Reject</p></div>
            </div>
        </div>
    <div className={styles.transaction_background} id = "submit_expense">
        <div className={styles.transaction_large}>
            <div className={styles.x_button} onClick={(e) => hide(e.nativeEvent.target.parentNode.parentNode)}></div>
            <div className={styles.payment_method} ><button onClick={(e) => toggleBillVenmo(e,false)}>BillMates</button><button onClick={(e) => toggleBillVenmo(e,true)}>Venmo</button></div> 
            <div className={styles.expense_payment_form}>
                <p>Original Amount : </p>
                <input type="text" id = "expense_paying" placeholder='00.00'></input>
            </div>
            <div className={styles.submit_expense_container} onClick={(e) => {handleExpensePay(e)}}><p>Bill Me</p></div>
        </div>
    </div> */}

      <Footer callback={showTransactionInput} args = {""}></Footer>
    </>
      );

}